// Copyright (c) 2019 DHGMS Solutions and Contributors. All rights reserved.
// This file is licensed to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Dhgms.GripeWithRoslyn.Analyzer.CodeCracker.Extensions
{
    /// <summary>
    /// Extensions for detecting a code block is generated.
    /// </summary>
    public static class CSharpGeneratedCodeAnalysisExtensions
    {
        /// <summary>
        /// Checks to see if a Roslyn Syntax Node analysis context contains generated code.
        /// </summary>
        /// <param name="context">The analysis context representing the current Roslyn Analysis.</param>
        /// <returns></returns>
        public static bool IsGenerated(this SyntaxNodeAnalysisContext context) => (context.SemanticModel?.SyntaxTree?.IsGenerated() ?? false) || (context.Node?.IsGenerated() ?? false);

        /// <summary>
        /// Checks to see if an roslyn syntax node contains generated code.
        /// </summary>
        /// <param name="node"></param>
        /// <returns>A flag indicating whether an generated code has been detected.</returns>
        public static bool IsGenerated(this SyntaxNode node) => node.HasAttributeOnAncestorOrSelf(GeneratedCodeAttributes());

        /// <summary>
        /// Checks to see if a Roslyn Syntax Tree analysis context contains generated code.
        /// </summary>
        /// <param name="context">The analysis context representing the current Roslyn Analysis.</param>
        /// <returns>A flag indicating whether an generated code has been detected.</returns>
        public static bool IsGenerated(this SyntaxTreeAnalysisContext context) => context.Tree?.IsGenerated() ?? false;

        /// <summary>
        /// Checks to see if a Roslyn Symbol Tree analysis context contains generated code.
        /// </summary>
        /// <param name="context">The analysis context representing the current Roslyn Analysis.</param>
        /// <returns>A flag indicating whether an generated code has been detected.</returns>
        public static bool IsGenerated(this SymbolAnalysisContext context)
        {
            var symbol = context.Symbol;
            if (symbol == null)
            {
                return false;
            }

            var declaringSyntaxReferences = symbol.DeclaringSyntaxReferences;
            if (declaringSyntaxReferences == null)
            {
                return false;
            }

            foreach (var syntaxReference in declaringSyntaxReferences)
            {
                var syntaxTree = syntaxReference.SyntaxTree;
                if (syntaxTree == null)
                {
                    continue;
                }

                if (syntaxTree.IsGenerated())
                {
                    return true;
                }

                var root = syntaxTree.GetRoot();
                if (root == null)
                {
                    continue;
                }

                var node = root?.FindNode(syntaxReference.Span);
                if (node == null)
                {
                    continue;
                }

                if (node.IsGenerated())
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Checks to see if a Syntax Tree contains generated code.
        /// </summary>
        /// <param name="tree">The Syntax Tree being analysed by Roslyn.</param>
        /// <returns>A flag indicating whether an generated code has been detected.</returns>
        public static bool IsGenerated(this SyntaxTree tree) => (tree.FilePath?.IsOnGeneratedFile() ?? false) || tree.HasAutoGeneratedComment();

        /// <summary>
        /// Returns whether a syntax tree contains an XML comment suggesting
        /// auto generation.
        /// </summary>
        /// <param name="tree"></param>
        /// <returns>A flag indicating whether an auto generated xml comment has been detected.</returns>
        public static bool HasAutoGeneratedComment(this SyntaxTree tree)
        {
            var root = tree.GetRoot();
            if (root == null)
            {
                return false;
            }

            var firstToken = root.GetFirstToken();
            SyntaxTriviaList trivia;
            if (firstToken == default(SyntaxToken))
            {
                var token = ((CompilationUnitSyntax)root).EndOfFileToken;
                if (!token.HasLeadingTrivia)
                {
                    return false;
                }

                trivia = token.LeadingTrivia;
            }
            else
            {
                if (!firstToken.HasLeadingTrivia)
                {
                    return false;
                }

                trivia = firstToken.LeadingTrivia;
            }

            var comments = trivia.Where(t => t.IsKind(SyntaxKind.SingleLineCommentTrivia) || t.IsKind(SyntaxKind.MultiLineCommentTrivia));
            return comments.Any(t =>
            {
                var s = t.ToString();
                return s.Contains("<auto-generated") || s.Contains("<autogenerated");
            });
        }

        private static string[] GeneratedCodeAttributes() => new string[] { "DebuggerNonUserCode", "GeneratedCode", "DebuggerNonUserCodeAttribute", "GeneratedCodeAttribute" };
    }
}
